// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: agent.proto

package agentapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NexAgent_GetHealth_FullMethodName               = "/api.NexAgent/GetHealth"
	NexAgent_SetExecutionEnvironment_FullMethodName = "/api.NexAgent/SetExecutionEnvironment"
	NexAgent_SubscribeToLogs_FullMethodName         = "/api.NexAgent/SubscribeToLogs"
	NexAgent_SubscribeToEvents_FullMethodName       = "/api.NexAgent/SubscribeToEvents"
	NexAgent_SubmitWorkload_FullMethodName          = "/api.NexAgent/SubmitWorkload"
)

// NexAgentClient is the client API for NexAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NexAgentClient interface {
	GetHealth(ctx context.Context, in *Void, opts ...grpc.CallOption) (*HealthReply, error)
	SetExecutionEnvironment(ctx context.Context, in *ExecutionEnvironment, opts ...grpc.CallOption) (*ExecutionEnvironmentReply, error)
	SubscribeToLogs(ctx context.Context, in *Void, opts ...grpc.CallOption) (NexAgent_SubscribeToLogsClient, error)
	SubscribeToEvents(ctx context.Context, in *Void, opts ...grpc.CallOption) (NexAgent_SubscribeToEventsClient, error)
	SubmitWorkload(ctx context.Context, opts ...grpc.CallOption) (NexAgent_SubmitWorkloadClient, error)
}

type nexAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewNexAgentClient(cc grpc.ClientConnInterface) NexAgentClient {
	return &nexAgentClient{cc}
}

func (c *nexAgentClient) GetHealth(ctx context.Context, in *Void, opts ...grpc.CallOption) (*HealthReply, error) {
	out := new(HealthReply)
	err := c.cc.Invoke(ctx, NexAgent_GetHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexAgentClient) SetExecutionEnvironment(ctx context.Context, in *ExecutionEnvironment, opts ...grpc.CallOption) (*ExecutionEnvironmentReply, error) {
	out := new(ExecutionEnvironmentReply)
	err := c.cc.Invoke(ctx, NexAgent_SetExecutionEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexAgentClient) SubscribeToLogs(ctx context.Context, in *Void, opts ...grpc.CallOption) (NexAgent_SubscribeToLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &NexAgent_ServiceDesc.Streams[0], NexAgent_SubscribeToLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &nexAgentSubscribeToLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NexAgent_SubscribeToLogsClient interface {
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type nexAgentSubscribeToLogsClient struct {
	grpc.ClientStream
}

func (x *nexAgentSubscribeToLogsClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nexAgentClient) SubscribeToEvents(ctx context.Context, in *Void, opts ...grpc.CallOption) (NexAgent_SubscribeToEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &NexAgent_ServiceDesc.Streams[1], NexAgent_SubscribeToEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &nexAgentSubscribeToEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NexAgent_SubscribeToEventsClient interface {
	Recv() (*AgentEvent, error)
	grpc.ClientStream
}

type nexAgentSubscribeToEventsClient struct {
	grpc.ClientStream
}

func (x *nexAgentSubscribeToEventsClient) Recv() (*AgentEvent, error) {
	m := new(AgentEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nexAgentClient) SubmitWorkload(ctx context.Context, opts ...grpc.CallOption) (NexAgent_SubmitWorkloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &NexAgent_ServiceDesc.Streams[2], NexAgent_SubmitWorkload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &nexAgentSubmitWorkloadClient{stream}
	return x, nil
}

type NexAgent_SubmitWorkloadClient interface {
	Send(*Workload) error
	CloseAndRecv() (*WorkloadAck, error)
	grpc.ClientStream
}

type nexAgentSubmitWorkloadClient struct {
	grpc.ClientStream
}

func (x *nexAgentSubmitWorkloadClient) Send(m *Workload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nexAgentSubmitWorkloadClient) CloseAndRecv() (*WorkloadAck, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WorkloadAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NexAgentServer is the server API for NexAgent service.
// All implementations must embed UnimplementedNexAgentServer
// for forward compatibility
type NexAgentServer interface {
	GetHealth(context.Context, *Void) (*HealthReply, error)
	SetExecutionEnvironment(context.Context, *ExecutionEnvironment) (*ExecutionEnvironmentReply, error)
	SubscribeToLogs(*Void, NexAgent_SubscribeToLogsServer) error
	SubscribeToEvents(*Void, NexAgent_SubscribeToEventsServer) error
	SubmitWorkload(NexAgent_SubmitWorkloadServer) error
	mustEmbedUnimplementedNexAgentServer()
}

// UnimplementedNexAgentServer must be embedded to have forward compatible implementations.
type UnimplementedNexAgentServer struct {
}

func (UnimplementedNexAgentServer) GetHealth(context.Context, *Void) (*HealthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedNexAgentServer) SetExecutionEnvironment(context.Context, *ExecutionEnvironment) (*ExecutionEnvironmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExecutionEnvironment not implemented")
}
func (UnimplementedNexAgentServer) SubscribeToLogs(*Void, NexAgent_SubscribeToLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToLogs not implemented")
}
func (UnimplementedNexAgentServer) SubscribeToEvents(*Void, NexAgent_SubscribeToEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToEvents not implemented")
}
func (UnimplementedNexAgentServer) SubmitWorkload(NexAgent_SubmitWorkloadServer) error {
	return status.Errorf(codes.Unimplemented, "method SubmitWorkload not implemented")
}
func (UnimplementedNexAgentServer) mustEmbedUnimplementedNexAgentServer() {}

// UnsafeNexAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NexAgentServer will
// result in compilation errors.
type UnsafeNexAgentServer interface {
	mustEmbedUnimplementedNexAgentServer()
}

func RegisterNexAgentServer(s grpc.ServiceRegistrar, srv NexAgentServer) {
	s.RegisterService(&NexAgent_ServiceDesc, srv)
}

func _NexAgent_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexAgentServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexAgent_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexAgentServer).GetHealth(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexAgent_SetExecutionEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionEnvironment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexAgentServer).SetExecutionEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexAgent_SetExecutionEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexAgentServer).SetExecutionEnvironment(ctx, req.(*ExecutionEnvironment))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexAgent_SubscribeToLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NexAgentServer).SubscribeToLogs(m, &nexAgentSubscribeToLogsServer{stream})
}

type NexAgent_SubscribeToLogsServer interface {
	Send(*LogEntry) error
	grpc.ServerStream
}

type nexAgentSubscribeToLogsServer struct {
	grpc.ServerStream
}

func (x *nexAgentSubscribeToLogsServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _NexAgent_SubscribeToEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NexAgentServer).SubscribeToEvents(m, &nexAgentSubscribeToEventsServer{stream})
}

type NexAgent_SubscribeToEventsServer interface {
	Send(*AgentEvent) error
	grpc.ServerStream
}

type nexAgentSubscribeToEventsServer struct {
	grpc.ServerStream
}

func (x *nexAgentSubscribeToEventsServer) Send(m *AgentEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _NexAgent_SubmitWorkload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NexAgentServer).SubmitWorkload(&nexAgentSubmitWorkloadServer{stream})
}

type NexAgent_SubmitWorkloadServer interface {
	SendAndClose(*WorkloadAck) error
	Recv() (*Workload, error)
	grpc.ServerStream
}

type nexAgentSubmitWorkloadServer struct {
	grpc.ServerStream
}

func (x *nexAgentSubmitWorkloadServer) SendAndClose(m *WorkloadAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nexAgentSubmitWorkloadServer) Recv() (*Workload, error) {
	m := new(Workload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NexAgent_ServiceDesc is the grpc.ServiceDesc for NexAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NexAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.NexAgent",
	HandlerType: (*NexAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _NexAgent_GetHealth_Handler,
		},
		{
			MethodName: "SetExecutionEnvironment",
			Handler:    _NexAgent_SetExecutionEnvironment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToLogs",
			Handler:       _NexAgent_SubscribeToLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToEvents",
			Handler:       _NexAgent_SubscribeToEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubmitWorkload",
			Handler:       _NexAgent_SubmitWorkload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "agent.proto",
}
