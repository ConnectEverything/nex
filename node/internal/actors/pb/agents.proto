// Message definitions for communciation with and between agent actors
// This is NOT the API definition for host services or the internal NATS server agent comms
// protocol.

syntax = "proto3";
import "google/protobuf/timestamp.proto";

package agents;

option go_package = "github.com/synadia-io/nex/node/actors/pb;actorproto";

message PingNode {}

message PingNodeResponse {
  string node_id = 1;
  string nexus = 2;
  string version = 3;
  string target_xkey = 4;
  google.protobuf.Timestamp started_at = 5;
  map<string, string> tags = 6;
  map<string, int32> running_agents = 7;
}

message PingAgent {
  string namespace = 1;
  string type = 2;
}

message PingWorkload {
  string namespace = 1;
  string type = 2;
  string workload_id = 3;
  string state = 4;
}

message PingAgentResponse {
  string node_id = 1;
  string target_xkey = 2;
  string version = 3;
  map<string, string> tags = 4;
  google.protobuf.Timestamp started_at = 5;
  repeated RunningWorkload running_workloads = 6;
}

message PingWorkloadResponse {
  WorkloadSummary workload = 1;
}

message RunningWorkload {
  string id = 1;
  string namespace = 2;
  string name = 3;
}

message AuctionRequest {
  string architecture = 1;
  string operating_system = 2;
  repeated string tags = 3;
  repeated string agent_type = 4;
}

message AuctionResponse {
  string bidder_id = 1;
  string nexus = 2;
  string version = 3;
  string target_xkey = 4;
  google.protobuf.Timestamp started_at = 5;
  map<string, string> tags = 6;
  map<string, int32> status = 7;
}

// Sent by the control API actor to an agent actor to request a workload be started
message StartWorkload {
  repeated string argv = 1;
  string description = 2;
  EncEnvironment environment = 3;
  string hash = 4;
  HostServicesConfig host_service_config = 5;
  string jsdomain = 6;
  string retried_at = 7;
  int32 retry_count = 8;
  string trigger_subject = 9;
  string uri = 10;
  string workload_jwt = 11;
  string workload_name = 12;
  string workload_type = 13;
  string namespace = 14;
  string workload_runtype = 15;
}

message EncEnvironment {
  string encrypted_by = 1;
  string base64_encrypted_env = 2;
}

message HostServicesConfig {
  string nats_url = 1;
  string nats_user_seed = 2;
  string nats_user_jwt = 3;
}

message GetRunRequest {
  string namespace = 1;
  string workload_id = 2;
}

message NoEnvRunRequest {
  map<string, string> clear_env = 1;
  StartWorkload run_request = 2;
} 

// Reply from the agent actor containing the results of the attempt to start a workload
message WorkloadStarted {
  string id = 1;
  string issuer = 2;
  string name = 3;
  bool started = 4;
}

// Request sent by the control API actor to an agent actor asking to stop a workload
message StopWorkload {
  string namespace = 1;
  string workload_id = 2;
}

// Response from the agent actor indicating the results of the workload stop attempt
message WorkloadStopped {
  string id = 1;
  string issuer = 2;
  bool stopped = 3;
}

// Asks the target agent for a list of all if its known, running workloads
message QueryWorkloads {}
message QueryWorkload {}

message WorkloadList {
  repeated WorkloadSummary workloads = 1;
}

message SpawnDirectStartProcess {}
message KillDirectStartProcess {}

message GetNodeInfo {}
message NodeInfo {
  string nexus = 1;
  string id = 2;
  map<string, string> tags = 3;
  string target_xkey = 4;
  string uptime = 5;
  string version = 6;
  repeated WorkloadSummary workloads = 7;
}

message WorkloadSummary {
    string id = 1;
    string name = 2;
    string runtime = 3;
    google.protobuf.Timestamp started_at = 4;
    string workload_type = 5;
    string workload_runtype = 6;
    string namespace = 7;
    string state = 8;
}

message SetLameDuck {}
message LameDuckResponse {
  bool success = 1;
}

// Request made by the actor system and/or control API asking the agent to stop. Note
// that the direct start agent will ignore this
message Halt {

}
