// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package api

import "encoding/json"
import "fmt"

type AuctionRequest struct {
	// The type of agent to auction for
	AgentType []NexWorkload `json:"agent_type,omitempty"`

	// A unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// A list of tags to associate with the node during auction. To be returned, node
	// must satisfy ALL tags
	Tags AuctionRequestTags `json:"tags"`
}

// A list of tags to associate with the node during auction. To be returned, node
// must satisfy ALL tags
type AuctionRequestTags struct {
	// Tags corresponds to the JSON schema field "tags".
	Tags AuctionRequestTagsTags `json:"tags,omitempty"`
}

type AuctionRequestTagsTags map[string]string

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuctionRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["auction_id"]; raw != nil && !ok {
		return fmt.Errorf("field auction_id in AuctionRequest: required")
	}
	if _, ok := raw["tags"]; raw != nil && !ok {
		return fmt.Errorf("field tags in AuctionRequest: required")
	}
	type Plain AuctionRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AuctionRequest(plain)
	return nil
}

type AuctionResponse struct {
	// A one-time identifier used to target deployments
	BidderId string `json:"bidder_id"`

	// The number of agents running and their workload counts
	Status AuctionResponseStatus `json:"status"`

	// Tags corresponds to the JSON schema field "tags".
	Tags AuctionResponseTags `json:"tags"`

	// The target nodes xkey
	TargetXkey string `json:"target_xkey"`

	// The uptime of the node
	Uptime string `json:"uptime"`

	// The version of the node
	Version string `json:"version"`
}

// The number of agents running and their workload counts
type AuctionResponseStatus struct {
	// Status corresponds to the JSON schema field "status".
	Status AuctionResponseStatusStatus `json:"status,omitempty"`
}

type AuctionResponseStatusStatus map[string]int

type AuctionResponseTags struct {
	// Tags corresponds to the JSON schema field "tags".
	Tags AuctionResponseTagsTags `json:"tags,omitempty"`
}

type AuctionResponseTagsTags map[string]string

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuctionResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["bidder_id"]; raw != nil && !ok {
		return fmt.Errorf("field bidder_id in AuctionResponse: required")
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in AuctionResponse: required")
	}
	if _, ok := raw["tags"]; raw != nil && !ok {
		return fmt.Errorf("field tags in AuctionResponse: required")
	}
	if _, ok := raw["target_xkey"]; raw != nil && !ok {
		return fmt.Errorf("field target_xkey in AuctionResponse: required")
	}
	if _, ok := raw["uptime"]; raw != nil && !ok {
		return fmt.Errorf("field uptime in AuctionResponse: required")
	}
	if _, ok := raw["version"]; raw != nil && !ok {
		return fmt.Errorf("field version in AuctionResponse: required")
	}
	type Plain AuctionResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AuctionResponse(plain)
	return nil
}

type CloneWorkloadRequest struct {
	// NewTargetXkey corresponds to the JSON schema field "new_target_xkey".
	NewTargetXkey string `json:"new_target_xkey"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CloneWorkloadRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["new_target_xkey"]; raw != nil && !ok {
		return fmt.Errorf("field new_target_xkey in CloneWorkloadRequest: required")
	}
	type Plain CloneWorkloadRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CloneWorkloadRequest(plain)
	return nil
}

type CloneWorkloadResponse struct {
	// StartWorkloadRequest corresponds to the JSON schema field
	// "start_workload_request".
	StartWorkloadRequest *StartWorkloadRequest `json:"start_workload_request,omitempty"`
}

type NexWorkload string

type NodeInfoRequest struct {
	// Namespace of the node
	Namespace string `json:"namespace"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NodeInfoRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["namespace"]; raw != nil && !ok {
		return fmt.Errorf("field namespace in NodeInfoRequest: required")
	}
	type Plain NodeInfoRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NodeInfoRequest(plain)
	return nil
}

type NodeInfoResponse struct {
	// The unique identifier of the node
	NodeId string `json:"node_id"`

	// Tags corresponds to the JSON schema field "tags".
	Tags NodeInfoResponseTags `json:"tags"`

	// The target nodes xkey
	TargetXkey string `json:"target_xkey"`

	// The uptime of the node
	Uptime string `json:"uptime"`

	// The version of the node
	Version string `json:"version"`

	// WorkloadSummaries corresponds to the JSON schema field "workload_summaries".
	WorkloadSummaries []WorkloadSummary `json:"workload_summaries"`
}

type NodeInfoResponseTags struct {
	// Tags corresponds to the JSON schema field "tags".
	Tags NodeInfoResponseTagsTags `json:"tags,omitempty"`
}

type NodeInfoResponseTagsTags map[string]string

// UnmarshalJSON implements json.Unmarshaler.
func (j *NodeInfoResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["node_id"]; raw != nil && !ok {
		return fmt.Errorf("field node_id in NodeInfoResponse: required")
	}
	if _, ok := raw["tags"]; raw != nil && !ok {
		return fmt.Errorf("field tags in NodeInfoResponse: required")
	}
	if _, ok := raw["target_xkey"]; raw != nil && !ok {
		return fmt.Errorf("field target_xkey in NodeInfoResponse: required")
	}
	if _, ok := raw["uptime"]; raw != nil && !ok {
		return fmt.Errorf("field uptime in NodeInfoResponse: required")
	}
	if _, ok := raw["version"]; raw != nil && !ok {
		return fmt.Errorf("field version in NodeInfoResponse: required")
	}
	if _, ok := raw["workload_summaries"]; raw != nil && !ok {
		return fmt.Errorf("field workload_summaries in NodeInfoResponse: required")
	}
	type Plain NodeInfoResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NodeInfoResponse(plain)
	return nil
}

type NodePingResponse struct {
	// The unique identifier of the node
	NodeId string `json:"node_id"`

	// The number of agents running with workload count
	RunningAgents NodePingResponseRunningAgents `json:"running_agents"`

	// Tags corresponds to the JSON schema field "tags".
	Tags NodePingResponseTags `json:"tags"`

	// The target nodes xkey
	TargetXkey string `json:"target_xkey"`

	// The uptime of the node
	Uptime string `json:"uptime"`

	// The version of the node
	Version string `json:"version"`
}

// The number of agents running with workload count
type NodePingResponseRunningAgents struct {
	// Status corresponds to the JSON schema field "status".
	Status NodePingResponseRunningAgentsStatus `json:"status,omitempty"`
}

type NodePingResponseRunningAgentsStatus map[string]int

type NodePingResponseTags struct {
	// Tags corresponds to the JSON schema field "tags".
	Tags NodePingResponseTagsTags `json:"tags,omitempty"`
}

type NodePingResponseTagsTags map[string]string

// UnmarshalJSON implements json.Unmarshaler.
func (j *NodePingResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["node_id"]; raw != nil && !ok {
		return fmt.Errorf("field node_id in NodePingResponse: required")
	}
	if _, ok := raw["running_agents"]; raw != nil && !ok {
		return fmt.Errorf("field running_agents in NodePingResponse: required")
	}
	if _, ok := raw["tags"]; raw != nil && !ok {
		return fmt.Errorf("field tags in NodePingResponse: required")
	}
	if _, ok := raw["target_xkey"]; raw != nil && !ok {
		return fmt.Errorf("field target_xkey in NodePingResponse: required")
	}
	if _, ok := raw["uptime"]; raw != nil && !ok {
		return fmt.Errorf("field uptime in NodePingResponse: required")
	}
	if _, ok := raw["version"]; raw != nil && !ok {
		return fmt.Errorf("field version in NodePingResponse: required")
	}
	type Plain NodePingResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NodePingResponse(plain)
	return nil
}

type WorkloadSummary struct {
	// The unique identifier of the workload
	Id string `json:"id"`

	// The name of the workload
	Name string `json:"name"`

	// The runtime of the workload
	Runtime string `json:"runtime"`

	// The start time of the workload
	StartTime string `json:"start_time"`

	// The runtype/lifecycle of the workload
	WorkloadRuntype string `json:"workload_runtype"`

	// The state of the workload
	WorkloadState string `json:"workload_state"`

	// The type of the workload
	WorkloadType string `json:"workload_type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WorkloadSummary) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in WorkloadSummary: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in WorkloadSummary: required")
	}
	if _, ok := raw["runtime"]; raw != nil && !ok {
		return fmt.Errorf("field runtime in WorkloadSummary: required")
	}
	if _, ok := raw["start_time"]; raw != nil && !ok {
		return fmt.Errorf("field start_time in WorkloadSummary: required")
	}
	if _, ok := raw["workload_runtype"]; raw != nil && !ok {
		return fmt.Errorf("field workload_runtype in WorkloadSummary: required")
	}
	if _, ok := raw["workload_state"]; raw != nil && !ok {
		return fmt.Errorf("field workload_state in WorkloadSummary: required")
	}
	if _, ok := raw["workload_type"]; raw != nil && !ok {
		return fmt.Errorf("field workload_type in WorkloadSummary: required")
	}
	type Plain WorkloadSummary
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WorkloadSummary(plain)
	return nil
}
