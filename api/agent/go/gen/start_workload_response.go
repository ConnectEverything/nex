// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package gen

import "encoding/json"
import "fmt"

type StartWorkloadResponseJson struct {
	// Optional error text in case of workload start failure
	Error *string `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Indicates whether the workload was successfully started
	Success bool `json:"success" yaml:"success" mapstructure:"success"`

	// The unique identifier of the workload started. This is a nuid
	WorkloadId *string `json:"workloadId,omitempty" yaml:"workloadId,omitempty" mapstructure:"workloadId,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StartWorkloadResponseJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["success"]; raw != nil && !ok {
		return fmt.Errorf("field success in StartWorkloadResponseJson: required")
	}
	type Plain StartWorkloadResponseJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = StartWorkloadResponseJson(plain)
	return nil
}
