// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package gen

import "encoding/json"
import "fmt"

type StopWorkloadResponseJson struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Issuer corresponds to the JSON schema field "issuer".
	Issuer string `json:"issuer" yaml:"issuer" mapstructure:"issuer"`

	// Stopped corresponds to the JSON schema field "stopped".
	Stopped bool `json:"stopped" yaml:"stopped" mapstructure:"stopped"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StopWorkloadResponseJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in StopWorkloadResponseJson: required")
	}
	if _, ok := raw["issuer"]; raw != nil && !ok {
		return fmt.Errorf("field issuer in StopWorkloadResponseJson: required")
	}
	if _, ok := raw["stopped"]; raw != nil && !ok {
		return fmt.Errorf("field stopped in StopWorkloadResponseJson: required")
	}
	type Plain StopWorkloadResponseJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = StopWorkloadResponseJson(plain)
	return nil
}
