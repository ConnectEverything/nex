// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package gen

import "encoding/json"
import "fmt"

type AgentPingResponseJson struct {
	// The unique identifier of the node on which the agent is running
	NodeId string `json:"node_id" yaml:"node_id" mapstructure:"node_id"`

	// RunningWorkloads corresponds to the JSON schema field "running_workloads".
	RunningWorkloads []WorkloadPingMachineSummary `json:"running_workloads" yaml:"running_workloads" mapstructure:"running_workloads"`

	// Tags corresponds to the JSON schema field "tags".
	Tags AgentPingResponseJsonTags `json:"tags" yaml:"tags" mapstructure:"tags"`

	// The target agents xkey
	TargetXkey string `json:"target_xkey" yaml:"target_xkey" mapstructure:"target_xkey"`

	// The uptime of the node
	Uptime string `json:"uptime" yaml:"uptime" mapstructure:"uptime"`

	// The target agents version
	Version string `json:"version" yaml:"version" mapstructure:"version"`
}

type AgentPingResponseJsonTags struct {
	// Tags corresponds to the JSON schema field "tags".
	Tags AgentPingResponseJsonTagsTags `json:"tags,omitempty" yaml:"tags,omitempty" mapstructure:"tags,omitempty"`
}

type AgentPingResponseJsonTagsTags map[string]string

// UnmarshalJSON implements json.Unmarshaler.
func (j *AgentPingResponseJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["node_id"]; raw != nil && !ok {
		return fmt.Errorf("field node_id in AgentPingResponseJson: required")
	}
	if _, ok := raw["running_workloads"]; raw != nil && !ok {
		return fmt.Errorf("field running_workloads in AgentPingResponseJson: required")
	}
	if _, ok := raw["tags"]; raw != nil && !ok {
		return fmt.Errorf("field tags in AgentPingResponseJson: required")
	}
	if _, ok := raw["target_xkey"]; raw != nil && !ok {
		return fmt.Errorf("field target_xkey in AgentPingResponseJson: required")
	}
	if _, ok := raw["uptime"]; raw != nil && !ok {
		return fmt.Errorf("field uptime in AgentPingResponseJson: required")
	}
	if _, ok := raw["version"]; raw != nil && !ok {
		return fmt.Errorf("field version in AgentPingResponseJson: required")
	}
	type Plain AgentPingResponseJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AgentPingResponseJson(plain)
	return nil
}

type WorkloadPingMachineSummary struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Namespace corresponds to the JSON schema field "namespace".
	Namespace string `json:"namespace" yaml:"namespace" mapstructure:"namespace"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WorkloadPingMachineSummary) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in WorkloadPingMachineSummary: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in WorkloadPingMachineSummary: required")
	}
	if _, ok := raw["namespace"]; raw != nil && !ok {
		return fmt.Errorf("field namespace in WorkloadPingMachineSummary: required")
	}
	type Plain WorkloadPingMachineSummary
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WorkloadPingMachineSummary(plain)
	return nil
}
