// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package gen

import "encoding/json"
import "fmt"

type SharedEncEnvJson struct {
	// Base64EncryptedEnv corresponds to the JSON schema field "base64_encrypted_env".
	Base64EncryptedEnv string `json:"base64_encrypted_env" yaml:"base64_encrypted_env" mapstructure:"base64_encrypted_env"`

	// EncryptedBy corresponds to the JSON schema field "encrypted_by".
	EncryptedBy string `json:"encrypted_by" yaml:"encrypted_by" mapstructure:"encrypted_by"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SharedEncEnvJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["base64_encrypted_env"]; raw != nil && !ok {
		return fmt.Errorf("field base64_encrypted_env in SharedEncEnvJson: required")
	}
	if _, ok := raw["encrypted_by"]; raw != nil && !ok {
		return fmt.Errorf("field encrypted_by in SharedEncEnvJson: required")
	}
	type Plain SharedEncEnvJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SharedEncEnvJson(plain)
	return nil
}

type SharedHostServiceJson struct {
	// NatsUrl corresponds to the JSON schema field "nats_url".
	NatsUrl string `json:"nats_url" yaml:"nats_url" mapstructure:"nats_url"`

	// NatsUserJwt corresponds to the JSON schema field "nats_user_jwt".
	NatsUserJwt string `json:"nats_user_jwt" yaml:"nats_user_jwt" mapstructure:"nats_user_jwt"`

	// NatsUserSeed corresponds to the JSON schema field "nats_user_seed".
	NatsUserSeed string `json:"nats_user_seed" yaml:"nats_user_seed" mapstructure:"nats_user_seed"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SharedHostServiceJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["nats_url"]; raw != nil && !ok {
		return fmt.Errorf("field nats_url in SharedHostServiceJson: required")
	}
	if _, ok := raw["nats_user_jwt"]; raw != nil && !ok {
		return fmt.Errorf("field nats_user_jwt in SharedHostServiceJson: required")
	}
	if _, ok := raw["nats_user_seed"]; raw != nil && !ok {
		return fmt.Errorf("field nats_user_seed in SharedHostServiceJson: required")
	}
	type Plain SharedHostServiceJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SharedHostServiceJson(plain)
	return nil
}
