// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package gen

type HostServicesConfig struct {
	// NatsUrl corresponds to the JSON schema field "nats_url".
	NatsUrl *string `json:"nats_url,omitempty" yaml:"nats_url,omitempty" mapstructure:"nats_url,omitempty"`

	// NatsUserJwt corresponds to the JSON schema field "nats_user_jwt".
	NatsUserJwt *string `json:"nats_user_jwt,omitempty" yaml:"nats_user_jwt,omitempty" mapstructure:"nats_user_jwt,omitempty"`
}

type StartWorkloadRequestJson struct {
	// Arguments to be passed to the binary
	Argv []string `json:"argv,omitempty" yaml:"argv,omitempty" mapstructure:"argv,omitempty"`

	// A description of the workload
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// The base64-encoded byte array of the environment in which the workload is
	// provided at runtime
	Environment *string `json:"environment,omitempty" yaml:"environment,omitempty" mapstructure:"environment,omitempty"`

	// Whether the workload is essential; essential workloads will be restarted if
	// they fail
	Essential *bool `json:"essential,omitempty" yaml:"essential,omitempty" mapstructure:"essential,omitempty"`

	// The hash of the workload
	Hash *string `json:"hash,omitempty" yaml:"hash,omitempty" mapstructure:"hash,omitempty"`

	// The NATS configuration for the host services
	HostServiceConfig *HostServicesConfig `json:"host_service_config,omitempty" yaml:"host_service_config,omitempty" mapstructure:"host_service_config,omitempty"`

	// The NATS JSDomain for the workload
	Jsdomain *string `json:"jsdomain,omitempty" yaml:"jsdomain,omitempty" mapstructure:"jsdomain,omitempty"`

	// The time at which the workload was last retried
	RetriedAt *string `json:"retried_at,omitempty" yaml:"retried_at,omitempty" mapstructure:"retried_at,omitempty"`

	// The number of times the workload has been retried
	RetryCount *int `json:"retry_count,omitempty" yaml:"retry_count,omitempty" mapstructure:"retry_count,omitempty"`

	// The public key of the sender
	SenderPublicKey *string `json:"sender_public_key,omitempty" yaml:"sender_public_key,omitempty" mapstructure:"sender_public_key,omitempty"`

	// The target node for the workload
	TargetNode *string `json:"target_node,omitempty" yaml:"target_node,omitempty" mapstructure:"target_node,omitempty"`

	// The subjects that trigger the workload
	TriggerSubjects []string `json:"trigger_subjects,omitempty" yaml:"trigger_subjects,omitempty" mapstructure:"trigger_subjects,omitempty"`

	// The URI of the workload
	Uri *string `json:"uri,omitempty" yaml:"uri,omitempty" mapstructure:"uri,omitempty"`

	// The JWT for the workload
	WorkloadJwt *string `json:"workload_jwt,omitempty" yaml:"workload_jwt,omitempty" mapstructure:"workload_jwt,omitempty"`

	// The name of the workload
	WorkloadName *string `json:"workload_name,omitempty" yaml:"workload_name,omitempty" mapstructure:"workload_name,omitempty"`

	// The type of the workload
	WorkloadType *string `json:"workload_type,omitempty" yaml:"workload_type,omitempty" mapstructure:"workload_type,omitempty"`
}
