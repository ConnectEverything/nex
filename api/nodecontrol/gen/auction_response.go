// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package gen

import "encoding/json"
import "fmt"

type AuctionResponseJson struct {
	// A one-time identifier used to target deployments
	BidderId string `json:"bidder_id"`

	// The number of agents running and their workload counts
	Status AuctionResponseJsonStatus `json:"status"`

	// Tags corresponds to the JSON schema field "tags".
	Tags AuctionResponseJsonTags `json:"tags"`

	// The target nodes xkey
	TargetXkey string `json:"target_xkey"`

	// The uptime of the node
	Uptime string `json:"uptime"`

	// The version of the node
	Version string `json:"version"`
}

// The number of agents running and their workload counts
type AuctionResponseJsonStatus struct {
	// Status corresponds to the JSON schema field "status".
	Status AuctionResponseJsonStatusStatus `json:"status,omitempty"`
}

type AuctionResponseJsonStatusStatus map[string]int

type AuctionResponseJsonTags struct {
	// Tags corresponds to the JSON schema field "tags".
	Tags AuctionResponseJsonTagsTags `json:"tags,omitempty"`
}

type AuctionResponseJsonTagsTags map[string]string

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuctionResponseJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["bidder_id"]; raw != nil && !ok {
		return fmt.Errorf("field bidder_id in AuctionResponseJson: required")
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in AuctionResponseJson: required")
	}
	if _, ok := raw["tags"]; raw != nil && !ok {
		return fmt.Errorf("field tags in AuctionResponseJson: required")
	}
	if _, ok := raw["target_xkey"]; raw != nil && !ok {
		return fmt.Errorf("field target_xkey in AuctionResponseJson: required")
	}
	if _, ok := raw["uptime"]; raw != nil && !ok {
		return fmt.Errorf("field uptime in AuctionResponseJson: required")
	}
	if _, ok := raw["version"]; raw != nil && !ok {
		return fmt.Errorf("field version in AuctionResponseJson: required")
	}
	type Plain AuctionResponseJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AuctionResponseJson(plain)
	return nil
}
