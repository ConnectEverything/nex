// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package gen

import "encoding/json"
import "fmt"

type AuctionResponseJson struct {
	// The name of the nexus - if assigned
	Nexus *string `json:"nexus,omitempty" yaml:"nexus,omitempty" mapstructure:"nexus,omitempty"`

	// The unique identifier of the node
	NodeId string `json:"node_id" yaml:"node_id" mapstructure:"node_id"`

	// The number of agents running with workload count
	Status AuctionResponseJsonStatus `json:"status" yaml:"status" mapstructure:"status"`

	// Tags corresponds to the JSON schema field "tags".
	Tags *AuctionResponseJsonTags `json:"tags,omitempty" yaml:"tags,omitempty" mapstructure:"tags,omitempty"`

	// The target nodes xkey
	TargetXkey string `json:"target_xkey" yaml:"target_xkey" mapstructure:"target_xkey"`

	// The uptime of the node
	Uptime string `json:"uptime" yaml:"uptime" mapstructure:"uptime"`

	// The version of the node
	Version string `json:"version" yaml:"version" mapstructure:"version"`
}

// The number of agents running with workload count
type AuctionResponseJsonStatus struct {
	// Status corresponds to the JSON schema field "status".
	Status AuctionResponseJsonStatusStatus `json:"status,omitempty" yaml:"status,omitempty" mapstructure:"status,omitempty"`
}

type AuctionResponseJsonStatusStatus map[string]int

type AuctionResponseJsonTags struct {
	// Tags corresponds to the JSON schema field "tags".
	Tags AuctionResponseJsonTagsTags `json:"tags,omitempty" yaml:"tags,omitempty" mapstructure:"tags,omitempty"`
}

type AuctionResponseJsonTagsTags map[string]string

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuctionResponseJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["node_id"]; raw != nil && !ok {
		return fmt.Errorf("field node_id in AuctionResponseJson: required")
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in AuctionResponseJson: required")
	}
	if _, ok := raw["target_xkey"]; raw != nil && !ok {
		return fmt.Errorf("field target_xkey in AuctionResponseJson: required")
	}
	if _, ok := raw["uptime"]; raw != nil && !ok {
		return fmt.Errorf("field uptime in AuctionResponseJson: required")
	}
	if _, ok := raw["version"]; raw != nil && !ok {
		return fmt.Errorf("field version in AuctionResponseJson: required")
	}
	type Plain AuctionResponseJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AuctionResponseJson(plain)
	return nil
}
