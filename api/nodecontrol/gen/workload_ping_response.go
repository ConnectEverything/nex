// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package gen

import "encoding/json"
import "fmt"

type WorkloadPingResponseJson struct {
	// The unique identifier of the node on which the agent is running
	NodeId string `json:"node_id" yaml:"node_id" mapstructure:"node_id"`

	// WorkloadSummary corresponds to the JSON schema field "workload_summary".
	WorkloadSummary *WorkloadSummary `json:"workload_summary,omitempty" yaml:"workload_summary,omitempty" mapstructure:"workload_summary,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WorkloadPingResponseJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["node_id"]; raw != nil && !ok {
		return fmt.Errorf("field node_id in WorkloadPingResponseJson: required")
	}
	type Plain WorkloadPingResponseJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WorkloadPingResponseJson(plain)
	return nil
}

type WorkloadSummary struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Runtime corresponds to the JSON schema field "runtime".
	Runtime *string `json:"runtime,omitempty" yaml:"runtime,omitempty" mapstructure:"runtime,omitempty"`

	// StartTime corresponds to the JSON schema field "start_time".
	StartTime string `json:"start_time" yaml:"start_time" mapstructure:"start_time"`

	// WorkloadType corresponds to the JSON schema field "workload_type".
	WorkloadType *string `json:"workload_type,omitempty" yaml:"workload_type,omitempty" mapstructure:"workload_type,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WorkloadSummary) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in WorkloadSummary: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in WorkloadSummary: required")
	}
	if _, ok := raw["start_time"]; raw != nil && !ok {
		return fmt.Errorf("field start_time in WorkloadSummary: required")
	}
	type Plain WorkloadSummary
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WorkloadSummary(plain)
	return nil
}
