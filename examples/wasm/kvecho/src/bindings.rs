// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod nexagent {
    #[allow(dead_code)]
    pub mod wasm {
        #[allow(dead_code, clippy::all)]
        pub mod keyvalue {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            pub fn set(bucket: &str, key: &str, value: &str) -> Result<bool, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = bucket;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = key;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = value;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "nexagent:wasm/keyvalue")]
                    extern "C" {
                        #[link_name = "set"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr0.cast_mut(),
                        len0,
                        ptr1.cast_mut(),
                        len1,
                        ptr2.cast_mut(),
                        len2,
                        ptr3,
                    );
                    let l4 = i32::from(*ptr3.add(0).cast::<u8>());
                    match l4 {
                        0 => {
                            let e = {
                                let l5 = i32::from(*ptr3.add(4).cast::<u8>());

                                _rt::bool_lift(l5 as u8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr3.add(4).cast::<*mut u8>();
                                let l7 = *ptr3.add(8).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get(bucket: &str, key: &str) -> Result<_rt::Vec<u8>, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = bucket;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = key;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "nexagent:wasm/keyvalue")]
                    extern "C" {
                        #[link_name = "get"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                    match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr2.add(4).cast::<*mut u8>();
                                let l5 = *ptr2.add(8).cast::<usize>();
                                let len6 = l5;

                                _rt::Vec::from_raw_parts(l4.cast(), len6, len6)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l7 = *ptr2.add(4).cast::<*mut u8>();
                                let l8 = *ptr2.add(8).cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                _rt::string_lift(bytes9)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn delete(bucket: &str, key: &str) -> Result<bool, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = bucket;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = key;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "nexagent:wasm/keyvalue")]
                    extern "C" {
                        #[link_name = "delete"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                    match l3 {
                        0 => {
                            let e = {
                                let l4 = i32::from(*ptr2.add(4).cast::<u8>());

                                _rt::bool_lift(l4 as u8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(4).cast::<*mut u8>();
                                let l6 = *ptr2.add(8).cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                _rt::string_lift(bytes7)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn keys(bucket: &str) -> Result<_rt::Vec<_rt::String>, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = bucket;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "nexagent:wasm/keyvalue")]
                    extern "C" {
                        #[link_name = "keys"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<*mut u8>();
                                let l4 = *ptr1.add(8).cast::<usize>();
                                let base8 = l3;
                                let len8 = l4;
                                let mut result8 = _rt::Vec::with_capacity(len8);
                                for i in 0..len8 {
                                    let base = base8.add(i * 8);
                                    let e8 = {
                                        let l5 = *base.add(0).cast::<*mut u8>();
                                        let l6 = *base.add(4).cast::<usize>();
                                        let len7 = l6;
                                        let bytes7 =
                                            _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                        _rt::string_lift(bytes7)
                                    };
                                    result8.push(e8);
                                }
                                _rt::cabi_dealloc(base8, len8 * 8, 4);

                                result8
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l9 = *ptr1.add(4).cast::<*mut u8>();
                                let l10 = *ptr1.add(8).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                                _rt::string_lift(bytes11)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod blobstore {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub struct ObjectInfo {
                pub nuid: _rt::String,
                pub size: u64,
                pub digest: _rt::String,
                pub bucket: _rt::String,
            }
            impl ::core::fmt::Debug for ObjectInfo {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ObjectInfo")
                        .field("nuid", &self.nuid)
                        .field("size", &self.size)
                        .field("digest", &self.digest)
                        .field("bucket", &self.bucket)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get(bucket: &str, key: &str) -> Result<_rt::Vec<u8>, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = bucket;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = key;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "nexagent:wasm/blobstore")]
                    extern "C" {
                        #[link_name = "get"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                    match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr2.add(4).cast::<*mut u8>();
                                let l5 = *ptr2.add(8).cast::<usize>();
                                let len6 = l5;

                                _rt::Vec::from_raw_parts(l4.cast(), len6, len6)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l7 = *ptr2.add(4).cast::<*mut u8>();
                                let l8 = *ptr2.add(8).cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                _rt::string_lift(bytes9)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn items(bucket: &str) -> Result<_rt::Vec<ObjectInfo>, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = bucket;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "nexagent:wasm/blobstore")]
                    extern "C" {
                        #[link_name = "items"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<*mut u8>();
                                let l4 = *ptr1.add(8).cast::<usize>();
                                let base15 = l3;
                                let len15 = l4;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 32);
                                    let e15 = {
                                        let l5 = *base.add(0).cast::<*mut u8>();
                                        let l6 = *base.add(4).cast::<usize>();
                                        let len7 = l6;
                                        let bytes7 =
                                            _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                                        let l8 = *base.add(8).cast::<i64>();
                                        let l9 = *base.add(16).cast::<*mut u8>();
                                        let l10 = *base.add(20).cast::<usize>();
                                        let len11 = l10;
                                        let bytes11 =
                                            _rt::Vec::from_raw_parts(l9.cast(), len11, len11);
                                        let l12 = *base.add(24).cast::<*mut u8>();
                                        let l13 = *base.add(28).cast::<usize>();
                                        let len14 = l13;
                                        let bytes14 =
                                            _rt::Vec::from_raw_parts(l12.cast(), len14, len14);

                                        ObjectInfo {
                                            nuid: _rt::string_lift(bytes7),
                                            size: l8 as u64,
                                            digest: _rt::string_lift(bytes11),
                                            bucket: _rt::string_lift(bytes14),
                                        }
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 32, 8);

                                result15
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = *ptr1.add(4).cast::<*mut u8>();
                                let l17 = *ptr1.add(8).cast::<usize>();
                                let len18 = l17;
                                let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                _rt::string_lift(bytes18)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn put(bucket: &str, key: &str, payload: &[u8]) -> Result<ObjectInfo, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 40]);
                    let vec0 = bucket;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = key;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = payload;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "nexagent:wasm/blobstore")]
                    extern "C" {
                        #[link_name = "put"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr0.cast_mut(),
                        len0,
                        ptr1.cast_mut(),
                        len1,
                        ptr2.cast_mut(),
                        len2,
                        ptr3,
                    );
                    let l4 = i32::from(*ptr3.add(0).cast::<u8>());
                    match l4 {
                        0 => {
                            let e = {
                                let l5 = *ptr3.add(8).cast::<*mut u8>();
                                let l6 = *ptr3.add(12).cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                                let l8 = *ptr3.add(16).cast::<i64>();
                                let l9 = *ptr3.add(24).cast::<*mut u8>();
                                let l10 = *ptr3.add(28).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);
                                let l12 = *ptr3.add(32).cast::<*mut u8>();
                                let l13 = *ptr3.add(36).cast::<usize>();
                                let len14 = l13;
                                let bytes14 = _rt::Vec::from_raw_parts(l12.cast(), len14, len14);

                                ObjectInfo {
                                    nuid: _rt::string_lift(bytes7),
                                    size: l8 as u64,
                                    digest: _rt::string_lift(bytes11),
                                    bucket: _rt::string_lift(bytes14),
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l15 = *ptr3.add(8).cast::<*mut u8>();
                                let l16 = *ptr3.add(12).cast::<usize>();
                                let len17 = l16;
                                let bytes17 = _rt::Vec::from_raw_parts(l15.cast(), len17, len17);

                                _rt::string_lift(bytes17)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn delete(bucket: &str, key: &str) -> Result<bool, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = bucket;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = key;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "nexagent:wasm/blobstore")]
                    extern "C" {
                        #[link_name = "delete"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                    match l3 {
                        0 => {
                            let e = {
                                let l4 = i32::from(*ptr2.add(4).cast::<u8>());

                                _rt::bool_lift(l4 as u8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(4).cast::<*mut u8>();
                                let l6 = *ptr2.add(8).cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                _rt::string_lift(bytes7)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod messaging {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            pub fn publish(subject: &str, payload: &[u8]) -> Result<bool, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = subject;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = payload;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "nexagent:wasm/messaging")]
                    extern "C" {
                        #[link_name = "publish"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                    match l3 {
                        0 => {
                            let e = {
                                let l4 = i32::from(*ptr2.add(4).cast::<u8>());

                                _rt::bool_lift(l4 as u8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(4).cast::<*mut u8>();
                                let l6 = *ptr2.add(8).cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                _rt::string_lift(bytes7)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn request(subject: &str, payload: &[u8]) -> Result<_rt::Vec<u8>, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = subject;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = payload;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "nexagent:wasm/messaging")]
                    extern "C" {
                        #[link_name = "request"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                    match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr2.add(4).cast::<*mut u8>();
                                let l5 = *ptr2.add(8).cast::<usize>();
                                let len6 = l5;

                                _rt::Vec::from_raw_parts(l4.cast(), len6, len6)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l7 = *ptr2.add(4).cast::<*mut u8>();
                                let l8 = *ptr2.add(8).cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                _rt::string_lift(bytes9)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod nexagent {
        #[allow(dead_code)]
        pub mod wasm {
            #[allow(dead_code, clippy::all)]
            pub mod nexfunction {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_run_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let result1 = T::run(_rt::Vec::from_raw_parts(arg0.cast(), len0, len0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let vec3 = (e).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec4 = (e.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr2.add(8).cast::<usize>() = len4;
                            *ptr2.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_run<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                        }
                        _ => {
                            let l4 = *arg0.add(4).cast::<*mut u8>();
                            let l5 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn run(payload: _rt::Vec<u8>) -> Result<_rt::Vec<u8>, _rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_nexagent_wasm_nexfunction_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "nexagent:wasm/nexfunction#run"]
          unsafe extern "C" fn export_run(arg0: *mut u8,arg1: usize,) -> *mut u8 {
            $($path_to_types)*::_export_run_cabi::<$ty>(arg0, arg1)
          }
          #[export_name = "cabi_post_nexagent:wasm/nexfunction#run"]
          unsafe extern "C" fn _post_return_run(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_run::<$ty>(arg0)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_nexagent_wasm_nexfunction_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_nex_component_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::nexagent::wasm::nexfunction::__export_nexagent_wasm_nexfunction_cabi!($ty with_types_in $($path_to_types_root)*::exports::nexagent::wasm::nexfunction);
  )
}
#[doc(inline)]
pub(crate) use __export_nex_component_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:nex-component:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 736] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xdc\x04\x01A\x02\x01\
A\x08\x01B\x0d\x01j\x01\x7f\x01s\x01@\x03\x06buckets\x03keys\x05values\0\0\x04\0\
\x03set\x01\x01\x01p}\x01j\x01\x02\x01s\x01@\x02\x06buckets\x03keys\0\x03\x04\0\x03\
get\x01\x04\x01@\x02\x06buckets\x03keys\0\0\x04\0\x06delete\x01\x05\x01ps\x01j\x01\
\x06\x01s\x01@\x01\x06buckets\0\x07\x04\0\x04keys\x01\x08\x03\x01\x16nexagent:wa\
sm/keyvalue\x05\0\x01B\x10\x01r\x04\x04nuids\x04sizew\x06digests\x06buckets\x04\0\
\x0bobject-info\x03\0\0\x01p}\x01j\x01\x02\x01s\x01@\x02\x06buckets\x03keys\0\x03\
\x04\0\x03get\x01\x04\x01p\x01\x01j\x01\x05\x01s\x01@\x01\x06buckets\0\x06\x04\0\
\x05items\x01\x07\x01j\x01\x01\x01s\x01@\x03\x06buckets\x03keys\x07payload\x02\0\
\x08\x04\0\x03put\x01\x09\x01j\x01\x7f\x01s\x01@\x02\x06buckets\x03keys\0\x0a\x04\
\0\x06delete\x01\x0b\x03\x01\x17nexagent:wasm/blobstore\x05\x01\x01B\x07\x01p}\x01\
j\x01\x7f\x01s\x01@\x02\x07subjects\x07payload\0\0\x01\x04\0\x07publish\x01\x02\x01\
j\x01\0\x01s\x01@\x02\x07subjects\x07payload\0\0\x03\x04\0\x07request\x01\x04\x03\
\x01\x17nexagent:wasm/messaging\x05\x02\x01B\x04\x01p}\x01j\x01\0\x01s\x01@\x01\x07\
payload\0\0\x01\x04\0\x03run\x01\x02\x04\x01\x19nexagent:wasm/nexfunction\x05\x03\
\x04\x01\x1bnexagent:wasm/nex-component\x04\0\x0b\x13\x01\0\x0dnex-component\x03\
\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-\
bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
